# -*- coding: utf-8 -*-
"""HEART_DISEASE_PREDICTION.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yc00bQ4VnOoHkCp3NaMbUnL2qCZmz_Xk

***HEART DISESE PREDICTION PROJECT***

**IMPORTING LIBRARIES AND UPLOADING DATA SET**
"""

import numpy as np
import pandas as pd

from google.colab import files
uploaded = files.upload()

df_data = pd.read_csv('heart.csv')

df_data

"""**EDA**"""

df_data.shape

df_data.columns

df_data.head()

df_data.tail()

df_data.info()

df_data.dtypes

df_data['age'].value_counts().index

df_data['sex'].value_counts().index

df_data['cp'].value_counts().index

df_data['trestbps'].value_counts().index

df_data['chol'].value_counts().index

df_data['fbs'].value_counts().index

df_data['restecg'].value_counts().index

df_data['thalach'].value_counts().index

df_data['exang'].value_counts().index

df_data['oldpeak'].value_counts().index

df_data['slope'].value_counts().index

df_data['ca'].value_counts().index

df_data['thal'].value_counts().index

df_data['target'].value_counts().index

df_data.isnull().sum()

df_data.iloc[:,-1]

df_heart=df_data.drop(1)

df_heart

df_heart.count()

df_heart.min()

df_heart.max()

df_heart.mean()

df_heart.median()

df_heart.quantile()

df_heart.sum()

df_heart.var()

df_heart.std()

df_heart.duplicated()

df_heart.describe()

df_heart.corr()

"""**DATA VISUALISATION**"""

import seaborn as sns
corr=df_heart.corr()
sns.heatmap(corr,annot=True)

"""**BUILDING A MACHINE LEARNING MODEL USING LOGISTIC REGRESSION.**"""

import pandas as pd

from warnings import simplefilter

simplefilter(action='ignore', category = FutureWarning)

df_heart.isnull().sum()

df_heart['target'] = df_heart.target.map({0: 0, 1: 1, 2: 1, 3: 1, 4: 1})
df_heart['sex'] = df_heart.sex.map({0: 'female', 1: 'male'})
df_heart['thalach'] = df_heart.thalach.fillna(df_heart.thalach.mean())
df_heart['ca'] = df_heart.ca.fillna(df_heart.ca.mean())

import matplotlib.pyplot as plt
import seaborn as sns

sns.set_context("paper", font_scale = 2, rc = {"font.size": 20,"axes.titlesize": 25,"axes.labelsize": 20}) 
sns.catplot(kind = 'count', data = df_heart, x = 'age', hue = 'target', order = df_heart['age'].sort_values().unique())
plt.title('Variation of Age for each target class')
plt.show()

sns.catplot(kind = 'bar', data = df_heart, y = 'age', x = 'sex', hue = 'target')
plt.title('Distribution of age vs sex with the target class')
plt.show()

df_heart['sex'] = df_heart.sex.map({'female': 0, 'male': 1})

"""**Data Preprocessing**"""

X = df_heart.iloc[:, :-1].values
y = df_heart.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler as ss
sc = ss()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""**Logistic Reegression**"""

X = df_heart.iloc[:, :-1].values
y = df_heart.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))

y_pred_train = classifier.predict(X_train)
cm_train = confusion_matrix(y_pred_train, y_train)

cm_train

print('Accuracy for training set for svm = {}'.format((cm_train[0][0] + cm_train[1][1])/len(y_train)))
print('Accuracy for test set for svm = {}'.format((cm_test[0][0] + cm_test[1][1])/len(y_test)))

"""**TESTING**"""

input_data = X[0:1]
input_data_to_arry = np.asarray(input_data)

input_data_to_arry_reshape = input_data_to_arry.reshape(1, -1)

print(input_data_to_arry.shape)

input_data_to_arry_reshape.shape

"""WE AARE PASSING TEST CASE WWHOSE TARGET IS 1, THAAT IS, THE PATIENT HAVE HEART DISEASE"""

prediction = classifier.predict(input_data_to_arry_reshape)
if (prediction[0] == 1):
  print("TEST CASE - PASSED")
else:
  print("TEST CASE - FAILED")

print(prediction)

print(y[0])

"""**Created By - N CHARAN**

**THE END**
"""